package com.example.softwarePatterns;

import java.io.File;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Payload;

import org.eclipse.jdt.internal.compiler.util.Sorting;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

/**
 * The core (architectural) design pattern you'd like to use is the Model-View-Controller pattern. The Controller is to be represented by a Servlet which (in)directly creates/uses a specific Model and View based on the request. The Model is to be represented by Javabean classes. This is often further dividable in Business Model which contains the actions (behaviour) and Data Model which contains the data (information). The View is to be represented by JSP files which have direct access to the (Data) Model by EL (Expression Language).

Then, there are variations based on how actions and events are handled. The popular ones are:

Request (action) based MVC: this is the simplest to implement. The (Business) Model works directly with HttpServletRequest and HttpServletResponse objects. You have to gather, convert and validate the request parameters (mostly) yourself. The View can be represented by plain vanilla HTML/CSS/JS and it does not maintain state across requests. This is how among others Spring MVC, Struts and Stripes works.

Component based MVC: this is harder to implement. But you end up with a simpler model and view wherein all the "raw" Servlet API is abstracted completely away. You shouldn't have the need to gather, convert and validate the request parameters yourself. The Controller does this task and sets the gathered, converted and validated request parameters in the Model. All you need to do is to define action methods which works directly with the model properties. The View is represented by "components" in flavor of JSP taglibs or XML elements which in turn generates HTML/CSS/JS. The state of the View for the subsequent requests is maintained in the session. This is particularly helpful for server-side conversion, validation and value change events. This is how among others JSF, Wicket and Play! works.

As a side note, hobbying around with a homegrown MVC framework is a very nice learning exercise, and I do recommend it as long as you keep it for personal/private purposes. But once you go professional, then it's strongly recommended to pick an existing framework rather than reinventing your own. Learning an existing and well-developed framework takes in long term less time than developing and maintaining a robust framework yourself.

In the below detailed explanation I'll restrict myself to request based MVC since that's easier to implement.
 * @author I342031
 *
 */

@Controller
public class HelloController {
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	

private UserRepository userRepository;
	@Autowired 
	private UserService userservice;
	
	@Autowired
	private StockItemRepository itemRepo;
	
	@Autowired
	ItemService itemservice;
	
	@Autowired
	OrderRepository orderrepo;
	
	@Autowired
	CartRepository cartRepo;
	@Autowired
	CommentRepository commentRepo;
	
	@Autowired
	CardRepository cardRepo;
	
	@Autowired
	OrderService orderService;
	
	
	@Autowired
	CardValidator cardValidator = new CardValidator();
	
//    @GetMapping({"/", "/hello"})
//    public String hello(Model model, @RequestParam(value="name", required=false, defaultValue="World") String name) {
//        model.addAttribute("name", name);
//        return "hello";
//    }
	
	
    
    @GetMapping(value="/index")
    public String home() {
    	return "index";
    }
    
    /**
     * 
     * @param name
     * @param password
     * @param request
     * @param model
     * @return
     */
    
    @RequestMapping(value="/login", method = RequestMethod.POST)
	public String verifyLogin(@RequestParam String name, @RequestParam String password, HttpServletRequest request, Model model) {
		User user = userservice.login(name, password);
		
		UserType user1;
	/*	if(user == null) {
			model.addAttribute("loginError", "Error logging in, please try again");
			return "login";
			
			
		}*/
		if(user != null) {
			int id;
			User loggedInUser = user;
			id = loggedInUser.getId();
			model.addAttribute(name, user.getName());
			System.out.print(loggedInUser.getId());
			
			request.getSession().setAttribute("user", loggedInUser);
			session = request.getSession(true);
			//session.setAttribute("loggedInUser", user);
			user1 = new User();
			return user1.login();
		}
		else if(name.equals("Admin") && password.equals("password")) {
			 user1 = new Admin();
			return user1.login();
			//return "admin";
		}
		else {
			model.addAttribute("loginError", "Error logging in, please try again");
			return "login";
	
		}
	}
	ArrayList<StockItem>items = new ArrayList<>();
    @RequestMapping(value = "/login", method=RequestMethod.GET)
	public String showLogin() {
		return "login";
	}
    
    @GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		//userRepository.save(n);
		
		StockItem item = new StockItem();
		item.setTitle("First item");
		//itemRepo.save(item);
		
		return "Saved";
	}
    private HttpSession session;
    
    
    @GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
    
    @RequestMapping(value = "/searchProducts", method = RequestMethod.GET)
	public String searchProducts(Model model, @RequestParam("keyword") String keyword) {
		ArrayList<StockItem> items = new ArrayList<>();
		System.out.println("here " + itemservice.getAllItems().size());
		
			
	
		for(int i=0; i<itemservice.getAllItems().size();i++) {
			//itemservice.getAllItems().get(i).getTitle().contains(keyword)
			if(itemservice.getAllItems().get(i).getTitle().contains(keyword) || itemservice.getAllItems().get(i).getCategory().contains(keyword)) {
				items.add(itemservice.getAllItems().get(i));
			}
		}
		System.out.println(items.size());
		SortingContext context = new SortingContext();
		context.setSortingMethod(new SortByName());
		context.descendingSort(items);
		model.addAttribute("lists",items);
		return "cart";
	}
    
    @RequestMapping(value= "/allCustomers" , method = RequestMethod.POST)
    public String customerDetails(HttpServletRequest request,Model model) {
    	final ArrayList<User>customersArrayList;
    	customersArrayList = (ArrayList<User>)userservice.getAllUsers();
    	UserList custsList = new UserList(customersArrayList);
    	ArrayList<User>listAll = new ArrayList<User>();
    	for(Iterator iterator = custsList.getIterator();iterator.hasNext();) {
    		User name = (User) iterator.next();
    		//int id = name.getId();
    		//String fname= name.getfName();
    		String userName = name.getName();
    		String email = name.getEmail();
    		//String lname = name.getlName();
    		String password = name.getPassword();
    		String address = name.getAddress();
    		User user1 = new User(userName,email,password,address);
    		listAll.add(user1);
    		
    	}
    	for(int i=0; i <listAll.size();i++) {
    		System.out.println(listAll.get(i).getEmail());
    	}
    	model.addAttribute("allUsers", listAll);
    	System.out.println(listAll.size());
    	request.getSession().setAttribute("allUsers", listAll);
		return "customerDetails";
    }
    @RequestMapping(value= "/orderDetails" , method = RequestMethod.POST)
    public String orderDetails(HttpServletRequest request,Model model,@RequestParam String email) {
    	User u = userservice.getEmail(email);
    	final ArrayList<Order>ordersArrayList;
    	final ArrayList<Order>orders = new ArrayList<>();
    	
    	for(int i=0; i < u.getOrders().size();i++) {
    		orders.add(u.getOrders().get(i));
    	}
    	ordersArrayList = (ArrayList<Order>)orderService.getAllOrders();
//    	try {
//    	for(int i =0; i < ordersArrayList.size();i++) {
//    		if(ordersArrayList.contains(u.getOrders().get(i))) {
//    			orders.add(ordersArrayList.get(i));
//    		}
//    	}
//    	}catch (IndexOutOfBoundsException e) {
//			// TODO: handle exception
//    		e.printStackTrace();
//		}
    	
    	OrderHistory history = new OrderHistory((ArrayList<Order>) orders);
    	ArrayList<Order>listAll = new ArrayList<Order>();
    	for(Iterator iterator = history.getIterator();iterator.hasNext();) {
    	
    		Order order = (Order) iterator.next();
    		//int id = name.getId();
    		//String fname= name.getfName();
    	String name = order.getName();
    		Order order1 = new Order(name);
    		listAll.add(order1);
    		
    	}
    	
    	model.addAttribute("allOrders", listAll);
    	System.out.println(listAll.size());
    	request.getSession().setAttribute("allOrders", listAll);
		return "orderDetails";
    }
    
    @RequestMapping(value= "/viewItems" , method = RequestMethod.POST)
    public String viewItems(HttpServletRequest request,Model model) {
    	ArrayList<StockItem>items = new ArrayList<>();
        items = (ArrayList<StockItem>) itemservice.getAllItems();
        model.addAttribute("lists",items);
		return "viewItems";
    }
    
    @RequestMapping("/AddItemsPage")
    public String addItems(HttpServletRequest request) {
    	final ArrayList<User>customersArrayList;
    	customersArrayList = (ArrayList<User>)userservice.getAllUsers();
		return "AdminAdd";
    }
    
    @RequestMapping(value="/AddItem", method = RequestMethod.POST)
   	public String addItem(@RequestParam String name, @RequestParam String category,@RequestParam String manufacturer,
   			@RequestParam int quantity, @RequestParam Double price,@RequestParam File pic,HttpServletRequest request) {
    	boolean state = false;
    	StockState noStockState = new OutStock();
    	StockState hasStockState = new InStock();
    	if(quantity <=0) {
    		state = noStockState.stateOfStock();
    		request.setAttribute("state", state);
    		System.out.println("out of stock" + state);
    	}
    	else {
    		state = hasStockState.stateOfStock();
    		request.setAttribute("state", state);
    	}
    		
    	StockItem item = new StockItem(name,manufacturer,price,category,state,quantity,pic.getAbsolutePath());
    	itemRepo.save(item);
   	return "added";
   		
   	}
    
    @RequestMapping(value = "/setQuantity",  method = RequestMethod.POST)
    public String setQuantity(Model model, HttpServletRequest request, @RequestParam(value="itemId") int id, @RequestParam int quantity) {
    	
    	System.out.println("The id is " + id);
    	model.addAttribute("id", id);
    	StockItem item = itemservice.getItem(id);
    	System.out.println(item.getTitle());
    	//originalItem = item;
    	
    	
    	item.setQuantity(quantity);
    	System.out.println(item.getTitle() + " :quantity left in stock: " + item.getQuantity());
    	ArrayList<StockItem>items = new ArrayList<>();
        items = (ArrayList<StockItem>) itemservice.getAllItems();
        model.addAttribute("lists",items);
        itemRepo.save(item);
    	//itemRepo.save(item);
    	//i can get the item id and then do find by id
    	return "viewItems";
    	
    }
    
    @RequestMapping(value="/register", method = RequestMethod.POST)
	public String registration(@RequestParam String name, @RequestParam String password,@RequestParam String email, @RequestParam String address, @RequestParam String town, @RequestParam String county, 
			@RequestParam String number, @RequestParam String payment, @RequestParam String fname, @RequestParam String lname, @RequestParam int date, @RequestParam int year) {
		User user = userservice.register(name, password, email,address);
		int type = Integer.parseInt(payment);
		Card card = new Card(fname, lname, address, town, county, number, type, date, year);
		card = cardValidator.initComponents(card);
		System.out.println(card.toString());
		
		
			//System.out.println("Card is valid");
			cardRepo.save(card);
			user.getCards().add(card);
		
		if(user == null) {
			
			return "login";
			
		}
		else {
			userRepository.save(user);
		//userservice.addUser(user);s
		//userservice.updateUser(user.getId(), user);
		return "success";
		}
		
	}
    @RequestMapping(value= "/addItem", method = RequestMethod.POST)
    public String addItem(HttpServletRequest request, Model model) {
    	
    	//User u = (User) request.getSession().getAttribute("user");
    	//System.out.println("WORDS" + u.getEmail()); 
		
		//StockItem item = new StockItem();
		//item.setTitle("First item");
		//itemRepo.save(item);
    	StockItem item = new StockItem();
    	item.setCategory("food");
    	item.setTitle("pizza");
    	StockItem item2 = new StockItem();
    	item2.setCategory("food");
    	item2.setTitle("burger");
    	items.add(item);
    	items.add(item2);
    	model.addAttribute("lists",this.items);
    	User u = (User) request.getSession().getAttribute("user");
    	User u2 = (User) session.getAttribute("user");
    	System.out.println("u2 " + u2.getEmail());
    	System.out.println(u.getEmail());
    	Cart cart = new Cart();
    	cart.getItems().add(item);
    	cart.getItems().add(item2);
    	u.setCart(cart);
    	Order order = new Order();
    	order.setCart(cart);
    	//order.getCart().getItems();
    	u.getOrders().add(order);
    	//userRepository.save(u);
    	
    	
    	System.out.print(u.getOrders().toString());
		return "itemHome";
    	
    }
    @RequestMapping(value = "/success")
    public String redirect(Model model) {
    	
		return "itemhome";
    }
    Cart cart = new Cart();
    int originalStockQuantity;
    StockItem originalItem;
    @RequestMapping(value = "/pay",  method = RequestMethod.POST)
    public String pay(Model model, HttpServletRequest request, @RequestParam(value="itemId") int id, @RequestParam int quantity) {
    	// id = (int) request.getSession().getAttribute("chosenID");
    	
    	System.out.println("The id is " + id);
    	model.addAttribute("id", id);
    	StockItem item = itemservice.getItem(id);
    	System.out.println(item.getTitle());
    	//originalItem = item;
    	if(cart.getItems().contains(item)) {
    		
    	}
    	item.setInCartQuantity(item.getInCartQuantity() + quantity);
    	System.out.println(item.getTitle() + " quantity in cart: " + item.getInCartQuantity());
    	item.setQuantity(item.getQuantity() - quantity);
    	System.out.println(item.getTitle() + " :quantity left in stock: " + item.getQuantity());
    	cart.getItems().add(item);
    	cart.calcTotalCost();
    	cart.setTotal(cart.calcTotalCost());
    	model.addAttribute("cartItems",cart.getItems());
    	User user = (User) request.getSession().getAttribute("user");
    	user.setCart(cart);
    	model.addAttribute("lists",this.items);
    	request.getSession().setAttribute("cart", cart);
    	System.out.println("THE SIZE OF THE CART IS " + cart.getItems().size() );
    	//itemRepo.save(item);
    	//i can get the item id and then do find by id
    	return "cart";
    	
    }
    
    @RequestMapping(value = "/clearItems",  method = RequestMethod.POST)
    public String clearItem(Model model, HttpServletRequest request, @RequestParam(value="itemId") int id) {
    	// id = (int) request.getSession().getAttribute("chosenID");
    	
    	System.out.println("The id is " + id);
    	model.addAttribute("id", id);
    	StockItem item = itemservice.getItem(id);
    	System.out.println(item.getTitle());
    	//originalItem = item;
    	if(cart.getItems().contains(item)) {
    		
    	}
    	item.setQuantity(item.getQuantity() + item.getInCartQuantity());
    	item.setInCartQuantity(0);
    	System.out.println(item.getTitle() + " quantity in cart: " + item.getInCartQuantity());
    	
    	System.out.println(item.getTitle() + " :quantity left in stock: " + item.getQuantity());
    	cart.getItems().remove(item);
    	model.addAttribute("cartItems",cart.getItems());
    	User user = (User) request.getSession().getAttribute("user");
    	user.setCart(cart);
    	model.addAttribute("lists",this.items);
    	request.getSession().setAttribute("cart", cart);
    	System.out.println("THE SIZE OF THE CART IS " + cart.getItems().size() );
    	itemRepo.save(item);
    	//i can get the item id and then do find by id
    	return "cart";
    	
    }
    
    @RequestMapping(value= "/confirmCart", method = RequestMethod.POST)
    public String confirmCart(Model model, HttpServletRequest request) {
    	model.addAttribute("cartItems",cart.getItems());
    	//Cart cart = (Cart) request.getSession().getAttribute("cart");
//    	User user = (User) request.getSession().getAttribute("user");
//    	Order order = new Order();
//    	order.setCart(user.getCart());
//    	user.getOrders().add(order);
//    	userRepository.save(user);
//    	//user.setCart(cart);
    	User user = (User) request.getSession().getAttribute("user");
    	System.out.println(user.getCart().getItems().toString() + user.getCart().getItems().size());
    	
		return "payforproduct";
    	
    }
    
    
    @RequestMapping(value= "/confirmBuy", method = RequestMethod.POST)
    public String confirmBuy(Model model, HttpServletRequest request) {
    	Cart cart = (Cart) request.getSession().getAttribute("cart");
    	User user = (User) request.getSession().getAttribute("user");
    	Order order = new Order();
    	String orderName ="";
    	order.setCart(user.getCart());
    	for(StockItem stock: user.getCart().getItems()) {
    		orderName = orderName + " " + stock.getTitle();
    	}
    	
    	order.setName("Order: " + orderName + " " + order.getCart().getTotal());
    	
    	user.getOrders().add(order);
    	System.out.println(user.getOrders().size());
    	cart.getItems();

    	
    	userRepository.save(user);
    	//userservice.updateUser(user.getId(), user);
    	model.addAttribute("cartItems",user.getCart().getItems());
    	System.out.println(user.getCart().getItems().toString());
    	System.out.println("reachedHere");
    	//user.setCart(cart);
    	
		return "orderConfirmation";
    	
    }
    
    @RequestMapping(value = "/postComment")
    public String postComment(HttpServletRequest request, Model model, @RequestParam(value="comment") String comment, @RequestParam(value="itemId") int id, @RequestParam int rating) {
    	User user = (User) request.getSession().getAttribute("user");
    	model.addAttribute("cartItems",user.getCart().getItems());
        Comment comment2 = new Comment();
        comment2.setContent(comment);
        comment2.setRating(rating);
        //comment2.setUser(user);
        user.getComments().add(comment2);
        StockItem item = itemservice.getItem(id);
        item.getComments().add(comment2);
       //comment2.setStockItem(item);
        //commentRepo.save(comment);
        //userRepository.save(user);
        commentRepo.save(comment2);
    	System.out.println(comment);
    	//user.setCart(cart);
    	
		return "orderConfirmation";
    }
    
    
    @RequestMapping(value = "/orderConfirmation")
    public String returnOrderConfirmation(HttpServletRequest request, Model model) {
    	User user = (User) request.getSession().getAttribute("user");
    	
		return "orderConfirmation";
    }
    
    @RequestMapping(value = "/confirmLoyaltyCard")
    public String pickLoyaltyCard(HttpServletRequest request, Model model, @RequestParam String loyaltyCard) {
    	User user = (User) request.getSession().getAttribute("user");
    	model.addAttribute("card", loyaltyCard);
    	
    	
    	if(loyaltyCard.equalsIgnoreCase("Gold"))
    	{
    		Gold gold = Gold.getInstance();
    		cart.setTotal(cart.discount(gold));
    	}
    	else if(loyaltyCard.equalsIgnoreCase("Silver"))
    	{
    		//NEED TO ADD SILVER
    		cart.discount(new Silver(loyaltyCard));
    	} else if(loyaltyCard.equalsIgnoreCase("Standard"))
    	{
    		//NEED TO ADD STANDARD
    		cart.discount(new Standard(loyaltyCard));
    	}
    	
    	System.out.println("The price is " + cart.getTotal());
    	
    	StockItem item = new StockItem();
    	item.setCategory("food");
    	item.setTitle("pizza");
    	
    //	item.setQuantity(10);
    	
    	StockItem item2 = new StockItem();
    	item2.setCategory("food");
    	//item2.setQuantity(10);
    	item.setImage("http://topqualitypizzas.ca/wp-content/uploads/2015/11/GARDEN-VEGGIE-SUPREME.jpg");
        item2.setImage("https://png.pngtree.com/element_pic/17/02/23/8a1ce248ab44efc7b37adad0b7b2d933.jpg");
        
    	item2.setTitle("burger");

    	
    	model.addAttribute("lists",this.items);
    	User u = (User) request.getSession().getAttribute("user");
    	//User u2 = (User) session.getAttribute("user");
    	
		return "cart";
    }
   
    @RequestMapping(value = "/startCart", method = RequestMethod.POST)
    public String cartHome(HttpServletRequest request, Model model) {
    	
    	boolean state;
    	StockState noStockState = new OutStock();
    	StockState hasStockState = new InStock();
    	
    	
    	StockItem item = new StockItem();
    	item.setCategory("food");
    	item.setTitle("pizza");
    	item.setPrice(20.0);
    	item.setQuantity(0);
    	
    	if(item.getQuantity() <=0) {
    		state = noStockState.stateOfStock();
    		request.setAttribute("state", state);
    		System.out.println("out of stock" + state);
    	}
    	else {
    		state = hasStockState.stateOfStock();
    		request.setAttribute("state", state);
    		System.out.println("in stock" +state);
    	}
    	item.setItemState(state);
    	item.setInCartQuantity(0);
    //	item.setQuantity(10);
    	
    	StockItem item2 = new StockItem();
    	item2.setQuantity(5);
    	if(item2.getQuantity() <=0) {
    		state = noStockState.stateOfStock();
    		request.setAttribute("state", state);
    		System.out.println("out of stock" + state);
    	}
    	else {
    		state = hasStockState.stateOfStock();
    		request.setAttribute("state", state);
    		System.out.println("in stock" +state);
    	}
    	item2.setItemState(state);
    	item2.setCategory("food");
    	item2.setInCartQuantity(0);
    	//item2.setQuantity(10);
    	item.setImage("http://topqualitypizzas.ca/wp-content/uploads/2015/11/GARDEN-VEGGIE-SUPREME.jpg");
        item2.setImage("https://png.pngtree.com/element_pic/17/02/23/8a1ce248ab44efc7b37adad0b7b2d933.jpg");
        
    	item2.setTitle("burger");
    	item2.setPrice(30.0);
    	items.add(item);
    	items.add(item2);
    	itemRepo.save(item);
    	itemRepo.save(item2);
    	items.addAll(itemservice.getAllItems());
    	//*************** have this page displaying items from db 
    	//request.getSession().setAttribute("chosenID", id);
    	
    	model.addAttribute("lists",this.items);
    	User u = (User) request.getSession().getAttribute("user");
    	//User u2 = (User) session.getAttribute("user");
    	return "cart";
    	
    }
    
    
   

}